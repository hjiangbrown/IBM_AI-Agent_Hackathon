{"version":3,"sources":["chat.ts"],"names":["ChatModel","Serializable","cache","NullCache","parameters","create","input","shallowCopy","RunContext","enter","params","signal","abortSignal","run","cacheEntry","createCacheAccessor","emitter","emit","chunks","generator","value","stream","_createStream","toAsyncGenerator","_create","controller","AbortController","push","callbacks","abort","aborted","resolve","result","ChatModelOutput","fromChunks","error","reject","ChatModelError","middleware","INSTRUMENTATION_ENABLED","createTelemetryMiddleware","doNothing","createStructure","_createStructure","config","isFunction","fromName","name","options","providerId","modelId","parseModel","Target","loadModel","undefined","schema","jsonSchema","toJsonSchema","systemTemplate","PromptTemplate","z","object","string","min","template","messages","SystemMessage","render","JSON","stringify","errorTemplate","errors","expected","received","Retryable","executor","response","responseFormat","type","textResponse","getTextContent","parseBrokenJson","pair","validator","createSchemaValidator","success","context","UserMessage","maxRetries","get","createSnapshot","destroy","_","tools","key","ObjectHashKeyFn","Serializer","serialize","map","msg","toPlain","isNew","task","Task","set","delete","constructor","usage","finishReason","final","forEach","cur","merge","other","customMerge","totalTokens","takeBigger","promptTokens","completionTokens","getToolCalls","filter","r","AssistantMessage","flatMap","Boolean","getTextMessages","text","join","toString","loadSnapshot","snapshot","Object","assign"],"mappings":"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","file":"chat.cjs","sourcesContent":["/**\n * Copyright 2025 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Serializable } from \"@/internals/serializable.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { customMerge } from \"@/internals/helpers/object.js\";\nimport { takeBigger } from \"@/internals/helpers/number.js\";\nimport { Callback } from \"@/emitter/types.js\";\nimport { FrameworkError } from \"@/errors.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { GetRunContext, RunContext } from \"@/context.js\";\nimport { INSTRUMENTATION_ENABLED } from \"@/instrumentation/config.js\";\nimport { createTelemetryMiddleware } from \"@/instrumentation/create-telemetry-middleware.js\";\nimport { doNothing, isFunction } from \"remeda\";\nimport { ObjectHashKeyFn } from \"@/cache/decoratorCache.js\";\nimport { Task } from \"promise-based-task\";\nimport { NullCache } from \"@/cache/nullCache.js\";\nimport { BaseCache } from \"@/cache/base.js\";\nimport { FullModelName, loadModel, parseModel } from \"@/backend/utils.js\";\nimport { ProviderName } from \"@/backend/constants.js\";\nimport { AnyTool } from \"@/tools/base.js\";\nimport { AssistantMessage, Message, SystemMessage, UserMessage } from \"@/backend/message.js\";\nimport {\n  JSONSchema7,\n  LanguageModelV1FunctionTool,\n  LanguageModelV1ProviderDefinedTool,\n  LanguageModelV1ToolChoice,\n} from \"@ai-sdk/provider\";\nimport { ChatModelError } from \"@/backend/errors.js\";\nimport { z } from \"zod\";\nimport {\n  createSchemaValidator,\n  parseBrokenJson,\n  toJsonSchema,\n} from \"@/internals/helpers/schema.js\";\nimport { Retryable } from \"@/internals/helpers/retryable.js\";\nimport type { ValidateFunction } from \"ajv\";\nimport { PromptTemplate } from \"@/template.js\";\nimport { toAsyncGenerator } from \"@/internals/helpers/promise.js\";\nimport { Serializer } from \"@/serializer/serializer.js\";\n\nexport interface ChatModelParameters {\n  maxTokens?: number;\n  topP?: number;\n  frequencyPenalty?: number;\n  temperature?: number;\n  topK?: number;\n  n?: number;\n  presencePenalty?: number;\n  seed?: number;\n  stopSequences?: string[];\n}\n\nexport interface ChatModelObjectInput<T> extends ChatModelParameters {\n  schema: z.ZodSchema<T>;\n  messages: Message[];\n  abortSignal?: AbortSignal;\n  maxRetries?: number;\n}\n\nexport interface ChatModelObjectOutput<T> {\n  object: T;\n}\n\nexport interface ChatModelInput extends ChatModelParameters {\n  tools?: AnyTool[];\n  abortSignal?: AbortSignal;\n  stopSequences?: string[];\n  responseFormat?:\n    | {\n        type: \"regular\";\n        tools?: (LanguageModelV1FunctionTool | LanguageModelV1ProviderDefinedTool)[];\n        toolChoice?: LanguageModelV1ToolChoice;\n      }\n    | {\n        type: \"object-json\";\n        schema?: JSONSchema7;\n        name?: string;\n        description?: string;\n      }\n    | {\n        type: \"object-tool\";\n        tool: LanguageModelV1FunctionTool;\n      };\n  toolChoice?: never; // TODO\n  messages: Message[];\n}\n\nexport type ChatModelFinishReason =\n  | \"stop\"\n  | \"length\"\n  | \"content-filter\"\n  | \"tool-calls\"\n  | \"error\"\n  | \"other\"\n  | \"unknown\";\n\nexport interface ChatModelUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n}\n\nexport interface ChatModelEvents {\n  newToken?: Callback<{ value: ChatModelOutput; callbacks: { abort: () => void } }>;\n  success?: Callback<{ value: ChatModelOutput }>;\n  start?: Callback<{ input: ChatModelInput }>;\n  error?: Callback<{ input: ChatModelInput; error: FrameworkError }>;\n  finish?: Callback<null>;\n}\n\nexport type ChatModelEmitter<A = Record<never, never>> = Emitter<\n  ChatModelEvents & Omit<A, keyof ChatModelEvents>\n>;\n\nexport type ChatModelCache = BaseCache<Task<ChatModelOutput[]>>;\nexport type ConfigFn<T> = (value: T) => T;\nexport interface ChatConfig {\n  cache?: ChatModelCache | ConfigFn<ChatModelCache>;\n  parameters?: ChatModelParameters | ConfigFn<ChatModelParameters>;\n}\n\nexport abstract class ChatModel extends Serializable {\n  public abstract readonly emitter: Emitter<ChatModelEvents>;\n  public cache: ChatModelCache = new NullCache();\n  public parameters: ChatModelParameters = {};\n\n  abstract get modelId(): string;\n  abstract get providerId(): string;\n\n  create(input: ChatModelInput & { stream?: boolean }) {\n    input = shallowCopy(input);\n\n    return RunContext.enter(\n      this,\n      { params: [input] as const, signal: input?.abortSignal },\n      async (run) => {\n        const cacheEntry = await this.createCacheAccessor(input);\n\n        try {\n          await run.emitter.emit(\"start\", { input });\n          const chunks: ChatModelOutput[] = [];\n\n          const generator =\n            cacheEntry.value ??\n            (input.stream\n              ? this._createStream(input, run)\n              : toAsyncGenerator(this._create(input, run)));\n\n          const controller = new AbortController();\n          for await (const value of generator) {\n            chunks.push(value);\n            await run.emitter.emit(\"newToken\", {\n              value,\n              callbacks: { abort: () => controller.abort() },\n            });\n            if (controller.signal.aborted) {\n              break;\n            }\n          }\n\n          cacheEntry.resolve(chunks);\n          const result = ChatModelOutput.fromChunks(chunks);\n          await run.emitter.emit(\"success\", { value: result });\n          return result;\n        } catch (error) {\n          await run.emitter.emit(\"error\", { input, error });\n          await cacheEntry.reject(error);\n          if (error instanceof ChatModelError) {\n            throw error;\n          } else {\n            throw new ChatModelError(`The Chat Model has encountered an error.`, [error]);\n          }\n        } finally {\n          await run.emitter.emit(\"finish\", null);\n        }\n      },\n    ).middleware(INSTRUMENTATION_ENABLED ? createTelemetryMiddleware() : doNothing());\n  }\n\n  createStructure<T>(input: ChatModelObjectInput<T>) {\n    return RunContext.enter(\n      this,\n      { params: [input] as const, signal: input?.abortSignal },\n      async (run) => {\n        return await this._createStructure<T>(input, run);\n      },\n    );\n  }\n\n  config({ cache, parameters }: ChatConfig): void {\n    if (cache) {\n      this.cache = isFunction(cache) ? cache(this.cache) : cache;\n    }\n    if (parameters) {\n      this.parameters = isFunction(parameters) ? parameters(this.parameters) : parameters;\n    }\n  }\n\n  static async fromName(name: FullModelName | ProviderName, options?: ChatModelParameters) {\n    const { providerId, modelId } = parseModel(name);\n    const Target = await loadModel<ChatModel>(providerId, \"chat\");\n    return new Target(modelId || undefined, options);\n  }\n\n  protected abstract _create(\n    input: ChatModelInput,\n    run: GetRunContext<typeof this>,\n  ): Promise<ChatModelOutput>;\n  protected abstract _createStream(\n    input: ChatModelInput,\n    run: GetRunContext<typeof this>,\n  ): AsyncGenerator<ChatModelOutput, void>;\n\n  protected async _createStructure<T>(\n    input: ChatModelObjectInput<T>,\n    run: GetRunContext<typeof this>,\n  ): Promise<ChatModelObjectOutput<T>> {\n    const { schema, ...options } = input;\n    const jsonSchema = toJsonSchema(schema);\n\n    const systemTemplate = new PromptTemplate({\n      schema: z.object({\n        schema: z.string().min(1),\n      }),\n      template: `You are a helpful assistant that generates only valid JSON adhering to the following JSON Schema.\n\n\\`\\`\\`\n{{schema}}\n\\`\\`\\`\n\nIMPORTANT: You MUST answer with a JSON object that matches the JSON schema above.`,\n    });\n\n    const messages: Message[] = [\n      new SystemMessage(systemTemplate.render({ schema: JSON.stringify(jsonSchema, null, 2) })),\n      ...input.messages,\n    ];\n\n    const errorTemplate = new PromptTemplate({\n      schema: z.object({\n        errors: z.string(),\n        expected: z.string(),\n        received: z.string(),\n      }),\n      template: `Generated object does not match the expected JSON schema!\n\nValidation Errors: {{errors}}`,\n    });\n\n    return new Retryable<ChatModelObjectOutput<T>>({\n      executor: async () => {\n        const response = await this._create(\n          {\n            ...options,\n            messages,\n            responseFormat: { type: \"object-json\" },\n          },\n          run,\n        );\n\n        const textResponse = response.getTextContent();\n        const object: T = parseBrokenJson(textResponse, { pair: [\"{\", \"}\"] });\n        const validator = createSchemaValidator(schema) as ValidateFunction<T>;\n\n        const success = validator(object);\n        if (!success) {\n          const context = {\n            expected: JSON.stringify(jsonSchema),\n            received: textResponse,\n            errors: JSON.stringify(validator.errors ?? []),\n          };\n\n          messages.push(new UserMessage(errorTemplate.render(context)));\n          throw new ChatModelError(`LLM did not produce a valid output.`, [], {\n            context,\n          });\n        }\n\n        return { object };\n      },\n      config: {\n        signal: run.signal,\n        maxRetries: input?.maxRetries || 1,\n      },\n    }).get();\n  }\n\n  createSnapshot() {\n    return { cache: this.cache, emitter: this.emitter, parameters: shallowCopy(this.parameters) };\n  }\n\n  destroy() {\n    this.emitter.destroy();\n  }\n\n  protected async createCacheAccessor({\n    abortSignal: _,\n    messages,\n    tools = [],\n    ...input\n  }: ChatModelInput) {\n    const key = ObjectHashKeyFn({\n      ...input,\n      messages: await Serializer.serialize(messages.map((msg) => msg.toPlain())),\n      tools: await Serializer.serialize(tools),\n    });\n    const value = await this.cache.get(key);\n    const isNew = value === undefined;\n\n    let task: Task<ChatModelOutput[]> | null = null;\n    if (isNew) {\n      task = new Task();\n      await this.cache.set(key, task);\n    }\n\n    return {\n      key,\n      value,\n      resolve: <T2 extends ChatModelOutput>(value: T2[]) => {\n        task?.resolve?.(value);\n      },\n      reject: async (error: Error) => {\n        task?.reject?.(error);\n        if (isNew) {\n          await this.cache.delete(key);\n        }\n      },\n    };\n  }\n}\n\nexport class ChatModelOutput extends Serializable {\n  constructor(\n    public readonly messages: Message[],\n    public usage?: ChatModelUsage,\n    public finishReason?: ChatModelFinishReason,\n  ) {\n    super();\n  }\n\n  static fromChunks(chunks: ChatModelOutput[]) {\n    const final = new ChatModelOutput([]);\n    chunks.forEach((cur) => final.merge(cur));\n    return final;\n  }\n\n  merge(other: ChatModelOutput) {\n    this.messages.push(...other.messages);\n    this.finishReason = other.finishReason;\n    if (this.usage && other.usage) {\n      this.usage = customMerge([this.usage, other.usage], {\n        totalTokens: takeBigger,\n        promptTokens: takeBigger,\n        completionTokens: takeBigger,\n      });\n    } else if (other.usage) {\n      this.usage = shallowCopy(other.usage);\n    }\n  }\n\n  getToolCalls() {\n    return this.messages\n      .filter((r) => r instanceof AssistantMessage)\n      .flatMap((r) => r.getToolCalls())\n      .filter(Boolean);\n  }\n\n  getTextMessages(): AssistantMessage[] {\n    return this.messages.filter((r) => r instanceof AssistantMessage).filter((r) => r.text);\n  }\n\n  getTextContent(): string {\n    return this.messages\n      .filter((r) => r instanceof AssistantMessage)\n      .flatMap((r) => r.text)\n      .filter(Boolean)\n      .join(\"\");\n  }\n\n  toString() {\n    return this.getTextContent();\n  }\n\n  createSnapshot() {\n    return {\n      messages: shallowCopy(this.messages),\n      usage: shallowCopy(this.usage),\n      finishReason: this.finishReason,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}