'use strict';

var errors_cjs = require('../errors.cjs');
var constants_cjs = require('./constants.cjs');
var remeda = require('remeda');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function findProviderDef(value) {
  return Object.values(constants_cjs.BackendProviders).find((p) => p.name === value || p.module === value || p.aliases.includes(value)) ?? null;
}
__name(findProviderDef, "findProviderDef");
function parseModel(name) {
  if (!name) {
    throw new errors_cjs.ValueError("Neither 'provider' nor 'provider:model' was specified.");
  }
  const [providerId, ...rest] = name.split(":");
  const modelId = rest.join(":");
  const providerDef = findProviderDef(providerId);
  if (!providerDef) {
    throw new errors_cjs.ValueError("Model does not contain provider name!");
  }
  return {
    providerId,
    modelId,
    providerDef
  };
}
__name(parseModel, "parseModel");
async function loadModel(name, type) {
  const { providerDef } = parseModel(name);
  const module = await import(`beeai-framework/adapters/${providerDef.module}/backend/${type}`);
  return module[`${providerDef.name}${remeda.capitalize(type)}Model`];
}
__name(loadModel, "loadModel");

exports.loadModel = loadModel;
exports.parseModel = parseModel;
//# sourceMappingURL=utils.cjs.map
//# sourceMappingURL=utils.cjs.map