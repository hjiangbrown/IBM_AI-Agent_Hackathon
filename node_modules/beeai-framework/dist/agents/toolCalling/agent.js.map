{"version":3,"sources":["agent.ts"],"names":["ToolCallingAgent","BaseAgent","emitter","constructor","input","Emitter","root","child","namespace","creator","register","_run","options","run","tempMessageKey","execution","totalMaxRetries","omitUndefined","state","memory","UnconstrainedMemory","result","undefined","iteration","add","SystemMessage","templates","system","render","role","instructions","prompt","userMessage","UserMessage","task","context","expectedOutput","isString","globalRetriesCounter","RetryCounter","AgentError","Infinity","emit","response","llm","create","messages","slice","tools","stream","addMany","toolCallMessages","getToolCalls","toolCall","tool","find","name","toolName","toolInput","args","toolResponse","toolCallMsg","ToolMessage","type","toolCallId","getTextContent","isError","e","ToolError","use","explain","textMessages","getTextMessages","isEmpty","AssistantMessage","deleteMany","filter","msg","meta","ZodSchema","structured","createStructure","schema","JSON","stringify","fromChunks","description","length","extraDescription","map","join","overrides","defaultTemplates","ToolCallingAgentSystemPrompt","ToolCallingAgentTaskPrompt","mapObj","key","defaultTemplate","override","PromptTemplate","createSnapshot","shallowCopy","enumerable"],"mappings":"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","file":"agent.js","sourcesContent":["/**\n * Copyright 2025 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AgentError, BaseAgent } from \"@/agents/base.js\";\nimport { AnyTool, ToolError, ToolOutput } from \"@/tools/base.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { AgentMeta } from \"@/agents/types.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport type {\n  ToolCallingAgentExecutionConfig,\n  ToolCallingAgentTemplates,\n  ToolCallingAgentCallbacks,\n  ToolCallingAgentRunInput,\n  ToolCallingAgentRunOptions,\n  ToolCallingAgentRunOutput,\n  ToolCallingAgentRunState,\n} from \"@/agents/toolCalling/types.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { ChatModel } from \"@/backend/chat.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { UnconstrainedMemory } from \"@/memory/unconstrainedMemory.js\";\nimport { AssistantMessage, SystemMessage, ToolMessage, UserMessage } from \"@/backend/message.js\";\nimport { isEmpty, isString } from \"remeda\";\nimport { RetryCounter } from \"@/internals/helpers/counter.js\";\nimport { mapObj, omitUndefined } from \"@/internals/helpers/object.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { PromptTemplate } from \"@/template.js\";\nimport {\n  ToolCallingAgentSystemPrompt,\n  ToolCallingAgentTaskPrompt,\n} from \"@/agents/toolCalling/prompts.js\";\nimport { ZodSchema } from \"zod\";\n\nexport type ToolCallingAgentTemplateFactory<K extends keyof ToolCallingAgentTemplates> = (\n  template: ToolCallingAgentTemplates[K],\n) => ToolCallingAgentTemplates[K];\n\nexport interface ToolCallingAgentInput {\n  llm: ChatModel;\n  memory: BaseMemory;\n  tools: AnyTool[];\n  meta?: Omit<AgentMeta, \"tools\">;\n  templates?: Partial<{\n    [K in keyof ToolCallingAgentTemplates]:\n      | ToolCallingAgentTemplates[K]\n      | ToolCallingAgentTemplateFactory<K>;\n  }>;\n  execution?: ToolCallingAgentExecutionConfig;\n}\n\nexport class ToolCallingAgent extends BaseAgent<\n  ToolCallingAgentRunInput,\n  ToolCallingAgentRunOutput,\n  ToolCallingAgentRunOptions\n> {\n  public readonly emitter = Emitter.root.child<ToolCallingAgentCallbacks>({\n    namespace: [\"agent\", \"toolCalling\"],\n    creator: this,\n  });\n\n  constructor(public readonly input: ToolCallingAgentInput) {\n    super();\n  }\n\n  static {\n    this.register();\n  }\n\n  protected async _run(\n    input: ToolCallingAgentRunInput,\n    options: ToolCallingAgentRunOptions = {},\n    run: GetRunContext<typeof this>,\n  ): Promise<ToolCallingAgentRunOutput> {\n    const tempMessageKey = \"tempMessage\" as const;\n    const execution = {\n      maxRetriesPerStep: 3,\n      totalMaxRetries: 20,\n      maxIterations: 10,\n      ...omitUndefined(this.input.execution ?? {}),\n      ...omitUndefined(options.execution ?? {}),\n    };\n\n    const state: ToolCallingAgentRunState = {\n      memory: new UnconstrainedMemory(),\n      result: undefined,\n      iteration: 0,\n    };\n    await state.memory.add(\n      new SystemMessage(\n        this.templates.system.render({\n          role: undefined,\n          instructions: undefined,\n        }),\n      ),\n    );\n\n    if (input.prompt) {\n      const userMessage = new UserMessage(\n        this.templates.task.render({\n          prompt: input.prompt,\n          context: input.context,\n          expectedOutput: isString(input.expectedOutput) ? input.expectedOutput : undefined,\n        }),\n      );\n      await state.memory.add(userMessage);\n    }\n\n    const globalRetriesCounter = new RetryCounter(execution.totalMaxRetries || 1, AgentError);\n\n    while (!state.result) {\n      state.iteration++;\n      if (state.iteration > (execution.totalMaxRetries ?? Infinity)) {\n        throw new AgentError(\n          `Agent was not able to resolve the task in ${state.iteration} iterations.`,\n        );\n      }\n\n      await run.emitter.emit(\"start\", { state });\n      const response = await this.input.llm.create({\n        messages: state.memory.messages.slice(),\n        tools: this.input.tools,\n        stream: false,\n      });\n      await state.memory.addMany(response.messages);\n\n      const toolCallMessages = response.getToolCalls();\n      for (const toolCall of toolCallMessages) {\n        try {\n          const tool = this.input.tools.find((tool) => tool.name === toolCall.toolName);\n          if (!tool) {\n            throw new AgentError(`Tool ${toolCall.toolName} does not exist!`);\n          }\n\n          const toolInput: any = toolCall.args;\n          const toolResponse: ToolOutput = await tool.run(toolInput).context({\n            state,\n            toolCallMsg: toolCall,\n          });\n          await state.memory.add(\n            new ToolMessage({\n              type: \"tool-result\",\n              toolCallId: toolCall.toolCallId,\n              toolName: toolCall.toolName,\n              result: toolResponse.getTextContent(),\n              isError: false,\n            }),\n          );\n        } catch (e) {\n          if (e instanceof ToolError) {\n            globalRetriesCounter.use(e);\n            await state.memory.add(\n              new ToolMessage({\n                type: \"tool-result\",\n                toolCallId: toolCall.toolCallId,\n                toolName: toolCall.toolName,\n                result: e.explain(),\n                isError: true,\n              }),\n            );\n          } else {\n            throw e;\n          }\n        }\n      }\n\n      // handle empty messages for some models\n      const textMessages = response.getTextMessages();\n      if (isEmpty(toolCallMessages) && isEmpty(textMessages)) {\n        await state.memory.add(new AssistantMessage(\"\\n\", { [tempMessageKey]: true }));\n      } else {\n        await state.memory.deleteMany(\n          state.memory.messages.filter((msg) => msg.meta[tempMessageKey]),\n        );\n      }\n\n      if (!isEmpty(textMessages) && isEmpty(toolCallMessages)) {\n        if (input.expectedOutput && input.expectedOutput instanceof ZodSchema) {\n          const structured = await this.input.llm.createStructure({\n            schema: input.expectedOutput,\n            messages: state.memory.messages.slice(),\n          });\n          state.result = new AssistantMessage(JSON.stringify(structured, null, 4));\n        } else {\n          state.result = AssistantMessage.fromChunks(textMessages);\n        }\n      }\n\n      await run.emitter.emit(\"success\", { state });\n    }\n\n    await this.memory.addMany(state.memory.messages.slice(1));\n    return { memory: state.memory, result: state.result };\n  }\n\n  get meta(): AgentMeta {\n    const tools = this.input.tools.slice();\n\n    if (this.input.meta) {\n      return { ...this.input.meta, tools };\n    }\n\n    return {\n      name: \"ToolCalling\",\n      tools,\n      description: \"ToolCallingAgent that uses tools to accomplish the task.\",\n      ...(tools.length > 0 && {\n        extraDescription: [\n          `Tools that I can use to accomplish given task.`,\n          ...tools.map((tool) => `Tool '${tool.name}': ${tool.description}.`),\n        ].join(\"\\n\"),\n      }),\n    };\n  }\n\n  @Cache({ enumerable: false })\n  protected get templates(): ToolCallingAgentTemplates {\n    const overrides = this.input.templates ?? {};\n    const defaultTemplates: ToolCallingAgentTemplates = {\n      system: ToolCallingAgentSystemPrompt,\n      task: ToolCallingAgentTaskPrompt,\n    } as const;\n\n    return mapObj(defaultTemplates)(\n      (key, defaultTemplate: ToolCallingAgentTemplates[typeof key]) => {\n        const override = overrides[key] ?? defaultTemplate;\n        if (override instanceof PromptTemplate) {\n          return override;\n        }\n        return override(defaultTemplate) ?? defaultTemplate;\n      },\n    );\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      input: shallowCopy(this.input),\n      emitter: this.emitter,\n    };\n  }\n\n  set memory(memory: BaseMemory) {\n    this.input.memory = memory;\n  }\n\n  get memory() {\n    return this.input.memory;\n  }\n}\n"]}