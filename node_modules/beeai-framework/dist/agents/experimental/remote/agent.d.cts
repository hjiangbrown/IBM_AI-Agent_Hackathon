import * as zod from 'zod';
import { C as Callback, E as Emitter } from '../../../emitter-BWtGHYn0.cjs';
import { a as BaseAgent, B as BaseAgentRunOptions } from '../../../base-Csr9guq2.cjs';
import { GetRunContext } from '../../../context.cjs';
import { Message } from '../../../backend/message.cjs';
import { BaseMemory } from '../../../memory/base.cjs';
import { Client } from '@i-am-bee/acp-sdk/client/index.js';
import { Transport } from '@i-am-bee/acp-sdk/shared/transport.js';
import '../../../internals/types.cjs';
import '../../../internals/helpers/guards.cjs';
import '../../../internals/serializable.cjs';
import '../../../errors.cjs';
import '../../../tools/base.cjs';
import 'ajv';
import 'promise-based-task';
import '../../../cache/base.cjs';
import '../../../internals/helpers/schema.cjs';
import 'zod-to-json-schema';
import '../../../internals/helpers/promise.cjs';
import 'ai';

interface RemoteAgentRunInput {
    prompt: Record<string, unknown> | string;
}
interface RemoteAgentRunOutput {
    message: Message;
}
interface RemoteAgentEvents {
    update: Callback<{
        output: string;
    }>;
}
interface Input {
    client: Client;
    transport: Transport;
    agentName: string;
}
declare class RemoteAgent extends BaseAgent<RemoteAgentRunInput, RemoteAgentRunOutput> {
    protected readonly input: Input;
    emitter: Emitter<RemoteAgentEvents>;
    constructor(input: Input);
    protected _run(input: RemoteAgentRunInput, _options: BaseAgentRunOptions, context: GetRunContext<this>): Promise<RemoteAgentRunOutput>;
    protected listAgents(): Promise<zod.objectOutputType<{
        name: zod.ZodString;
        description: zod.ZodOptional<zod.ZodString>;
        inputSchema: zod.ZodObject<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">>;
        outputSchema: zod.ZodObject<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{
            type: zod.ZodLiteral<"object">;
            properties: zod.ZodOptional<zod.ZodObject<{}, "passthrough", zod.ZodTypeAny, zod.objectOutputType<{}, zod.ZodTypeAny, "passthrough">, zod.objectInputType<{}, zod.ZodTypeAny, "passthrough">>>;
        }, zod.ZodTypeAny, "passthrough">>;
    }, zod.ZodTypeAny, "passthrough">[]>;
    protected createRunner(context: GetRunContext<this>): (input: RemoteAgentRunInput) => Promise<string>;
    get memory(): BaseMemory;
    set memory(memory: BaseMemory);
    createSnapshot(): {
        input: Input;
        emitter: Emitter<RemoteAgentEvents>;
        isRunning: boolean;
    };
    static createSSEAgent(url: string, agentName: string): RemoteAgent;
}

export { RemoteAgent, type RemoteAgentEvents, type RemoteAgentRunInput, type RemoteAgentRunOutput };
