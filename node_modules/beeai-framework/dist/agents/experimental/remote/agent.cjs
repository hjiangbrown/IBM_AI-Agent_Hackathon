'use strict';

var emitter_cjs = require('../../../emitter/emitter.cjs');
var base_cjs = require('../../base.cjs');
var message_cjs = require('../../../backend/message.cjs');
var index_js = require('@i-am-bee/acp-sdk/client/index.js');
var utils_cjs = require('../../../serializer/utils.cjs');
var errors_cjs = require('../../../errors.cjs');
var types_js = require('@i-am-bee/acp-sdk/types.js');
var sse_js = require('@i-am-bee/acp-sdk/client/sse.js');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class RemoteAgent extends base_cjs.BaseAgent {
  static {
    __name(this, "RemoteAgent");
  }
  input;
  emitter;
  constructor(input) {
    super(), this.input = input, this.emitter = emitter_cjs.Emitter.root.child({
      namespace: [
        "agent",
        "remote"
      ],
      creator: this
    });
  }
  async _run(input, _options, context) {
    const runner = this.createRunner(context);
    const output = await runner(input);
    const message = new message_cjs.AssistantMessage(output);
    return {
      message
    };
  }
  async listAgents() {
    const response = await this.input.client.listAgents();
    return response.agents;
  }
  createRunner(context) {
    return async (input) => {
      try {
        this.input.client.setNotificationHandler(types_js.AgentRunProgressNotificationSchema, async (notification) => {
          await context.emitter.emit("update", {
            output: JSON.stringify(notification.params.delta, null, 2)
          });
        });
        if (!this.input.client.transport) {
          await this.input.client.connect(this.input.transport);
        }
      } catch (e) {
        throw new base_cjs.AgentError(`Can't connect to Beeai Platform.`, [
          e
        ], {
          isFatal: true
        });
      }
      const agents = await this.listAgents();
      const agent = agents.find((agent2) => agent2.name === this.input.agentName);
      if (!agent) {
        throw new base_cjs.AgentError(`Agent ${this.input.agentName} is not registered in the platform`, [], {
          isFatal: true
        });
      }
      const response = await this.input.client.runAgent({
        name: this.input.agentName,
        input: typeof input.prompt === "string" ? {
          text: input.prompt
        } : input.prompt
      }, {
        timeout: 1e7,
        signal: context.signal,
        onprogress: /* @__PURE__ */ __name(() => null, "onprogress")
      });
      const output = JSON.stringify(response.output, null, 2);
      await context.emitter.emit("update", {
        output
      });
      return output;
    };
  }
  get memory() {
    throw new errors_cjs.NotImplementedError();
  }
  set memory(memory) {
    throw new errors_cjs.NotImplementedError();
  }
  createSnapshot() {
    return {
      ...super.createSnapshot(),
      input: utils_cjs.shallowCopy(this.input),
      emitter: this.emitter
    };
  }
  static createSSEAgent(url, agentName) {
    return new RemoteAgent({
      client: new index_js.Client({
        name: "remote-agent",
        version: "1.0.0"
      }),
      transport: new sse_js.SSEClientTransport(new URL(url)),
      agentName
    });
  }
}

exports.RemoteAgent = RemoteAgent;
//# sourceMappingURL=agent.cjs.map
//# sourceMappingURL=agent.cjs.map