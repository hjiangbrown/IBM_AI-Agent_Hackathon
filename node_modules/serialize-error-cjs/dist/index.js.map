{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { errorConstructors } from './constructors';\nexport { errorConstructors };\n\nconst getErrorConstructor = (name: string) => errorConstructors.get(name) ?? Error;\n\nconst commonProperties: { name: string, descriptor: Partial<PropertyDescriptor>, deserialize?: (_:any)=>any, serialize?: (_:any)=>any }[] = [\n  {\n    name: 'message',\n    descriptor: {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    },\n  },\n  {\n    name: 'stack',\n    descriptor: {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    },\n  },\n  {\n    name: 'code',\n    descriptor: {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n    },\n  },\n  {\n    name: 'cause',\n    descriptor: {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    },\n  },\n  {\n    name: 'errors',\n    descriptor: {\n      enumerable: false,\n      configurable: true,\n      writable: true,\n    },\n    deserialize: (errors: SerializedError[]) => errors.map(error => deserializeError(error)),\n    serialize: (errors: Error[]) => errors.map(error => serializeError(error)),\n  },\n];\n\nexport type SerializedError = {\n  name: string;\n  message: string;\n  stack: string;\n  code?: string|number;\n  cause?: string;\n};\n\nexport function serializeError(subject: Error): SerializedError {\n  const data: SerializedError = {\n    name   : 'Error',\n    message: '',\n    stack  : '',\n  };\n  for(const prop of commonProperties) {\n    if (!(prop.name in subject)) continue;\n    let value = subject[prop.name];\n    if (prop.serialize) value = prop.serialize(value);\n    data[prop.name] = value;\n  }\n  if (globalThis.DOMException && (subject instanceof globalThis.DOMException)) {\n    data.name = 'DOMException';\n  } else {\n    data.name = Object.getPrototypeOf(subject).name;\n  }\n  return data;\n}\n\nexport function deserializeError<T extends Error>(subject: SerializedError): T {\n  const con = getErrorConstructor(subject.name);\n  const output = Object.create(con.prototype);\n\n  for(const prop of commonProperties) {\n    if (!(prop.name in subject)) continue;\n\n    let value = subject[prop.name];\n    if (prop.deserialize) value = prop.deserialize(value);\n\n    Object.defineProperty(output, prop.name, {\n      ...prop.descriptor,\n      value: value,\n    });\n  }\n\n  return output;\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkC;AAGlC,MAAM,sBAAsB,CAAC,SAAc;AAH3C;AAG8C,qDAAkB,IAAI,IAAI,MAA1B,YAA+B;AAAA;AAE7E,MAAM,mBAAsI;AAAA,EAC1I;AAAA,IACE,MAAM;AAAA,IACN,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,YAAY;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,IACZ;AAAA,IACA,aAAa,CAAC,WAA8B,OAAO,IAAI,WAAS,iBAAiB,KAAK,CAAC;AAAA,IACvF,WAAW,CAAC,WAAoB,OAAO,IAAI,WAAS,eAAe,KAAK,CAAC;AAAA,EAC3E;AACF;AAUO,SAAS,eAAe,SAAiC;AAC9D,QAAM,OAAwB;AAAA,IAC5B,MAAS;AAAA,IACT,SAAS;AAAA,IACT,OAAS;AAAA,EACX;AACA,aAAU,QAAQ,kBAAkB;AAClC,QAAI,EAAE,KAAK,QAAQ,SAAU;AAC7B,QAAI,QAAQ,QAAQ,KAAK,IAAI;AAC7B,QAAI,KAAK,UAAW,SAAQ,KAAK,UAAU,KAAK;AAChD,SAAK,KAAK,IAAI,IAAI;AAAA,EACpB;AACA,MAAI,WAAW,gBAAiB,mBAAmB,WAAW,cAAe;AAC3E,SAAK,OAAO;AAAA,EACd,OAAO;AACL,SAAK,OAAO,OAAO,eAAe,OAAO,EAAE;AAAA,EAC7C;AACA,SAAO;AACT;AAEO,SAAS,iBAAkC,SAA6B;AAC7E,QAAM,MAAM,oBAAoB,QAAQ,IAAI;AAC5C,QAAM,SAAS,OAAO,OAAO,IAAI,SAAS;AAE1C,aAAU,QAAQ,kBAAkB;AAClC,QAAI,EAAE,KAAK,QAAQ,SAAU;AAE7B,QAAI,QAAQ,QAAQ,KAAK,IAAI;AAC7B,QAAI,KAAK,YAAa,SAAQ,KAAK,YAAY,KAAK;AAEpD,WAAO,eAAe,QAAQ,KAAK,MAAM,iCACpC,KAAK,aAD+B;AAAA,MAEvC;AAAA,IACF,EAAC;AAAA,EACH;AAEA,SAAO;AACT;",
  "names": []
}
